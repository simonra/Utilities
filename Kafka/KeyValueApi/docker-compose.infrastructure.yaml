# ToDo:
# - Replace this list of ToDo's with a readme?
#   - Mention where to find the kafka UI (localhost:8081)
#     - Say that the schema registry is a bit slower, so you might need to wait halfa a minute/minute before it's up and properly shows up in the Kafka UI instance if you don't have a dependency on it.
#   - Say you can connect to the brokers from outside contexts by attaching to the "apps_network". See example of how in sibling docker compose file.
#   - Outline how to make more and test with other credentials?
#   - Say that your life can be easier locally if the containers run with the same user as you, because you can then access all the generated files and anything else without having to mess around with changing ownership or permissions. The important thing is that the user Ids are the same for all the services needing to use the generated files, if you don't want to extend the scripts. You can find your own user ID:Group by running `$(id -u):$(id -g)`, or you can use `${UID}:${GROUPS}` directly as the value in the `user` filed (e.g. `services.broker1.user: ${UID}:${GROUPS}`).
#   - Highlight some important flags:
#     - `services.set-up-container-mount-area.environment.RESET_EVERYTHING`
#       - Removes all the stored folders and starts fresh if you set it to `true`.
#     - `services.create-certificate-authority.environment.RECREATE_IF_EXISTS`
#       - Should you want to recreate the CA, set this to `true`. Note that this won't trigger the issued certificates being recreated.
#     - `services.create-certificates.environment.RECREATE_IF_EXISTS`
#       - Should you want to recreate the Certificates, set this to `true`.
#     - `services.create-certificates.command.USE_DEMO_PASSWORDS`
#       - If you want to use the script to make random password rather than fixed demo values, set this to anything else than `true`.
#     - `services.create-certificates.command.RSA_BITS`
#       - Default to 1024, because 4096 is noticeably slow to humans, and default mode here is demo. You probably want other values in prod. If you change this, you probably also need to change the value for the CA (`services.create-certificate-authority.command.RSA_BITS`).
#     - `services.create-certificates.command.ENV_NAME`
#       - Helpfully makes a lot of the files contain the envrionment name, so that if you create multiple environments to experiment with running things in parallell it becomes easier to tell appart what files come from where.
#     - `services.create-certificates.command.VALIDITY_DAYS`
#       - Controlls how long the issued credentials are valid for. Note that if this is shorter than the validity of the CA, the crendentials will become invalid at the point in time the CA expires.
#   - Mention that while this gives you a lot, you still need to do a lot before calling yourself production ready
#     - Set up log shipping and handling
#     - Consider kafka UI having/being an admin user, and the existence of admin users in general
#     - Now that we're half way in 2023, you might want to do this with kubernetes instead
#       - Now that we're half way in 2023, zookeepers are legacy, use new cool k-raft feature instead and run only brokers.

networks:
  controllers_network:
    ipam:
      driver: default
      config:
        - subnet: "172.21.82.0/24"
        - subnet: "2001:2181:2181::/64"
  brokers_network:
    ipam:
      driver: default
      config:
        - subnet: "172.90.92.0/24"
        - subnet: "2001:9092:9092::/64"
  apps_network:
    attachable: true
    name: apps_network
    ipam:
      driver: default
      config:
        - subnet: "172.80.80.0/24"
        - subnet: "2001:8080:8080::/64"

services:
  set-up-container-mount-area:
    image: debian:stable-slim
    user: 1000:1001
    container_name: set-up-container-mount-area
    volumes:
      - .:/ProjectDir
    environment:
      RESET_EVERYTHING: "true"
    entrypoint:
      - '/bin/bash'
      - '-c'
      - |
        echo '================ Creating Output Directory with gitignore ========='
        if [ ''$$RESET_EVERYTHING == 'true' ]; then
          echo 'WARNING: Wiping ALL container data, certificates, everything, and starting fresh!'
          rm -rf /ProjectDir/ContainerData
        fi

        mkdir -p /ProjectDir/ContainerData

        if [ ! -f /ProjectDir/ContainerData/.gitignore ]; then
          echo 'Creating gitignore so that you dont accidentaly check in container data'
          echo 'If you want some of the container data checked in, simply add an exception to the gitignore'
          printf '%s\n' '*' '!.gitignore' > /ProjectDir/ContainerData/.gitignore
        fi

        echo 'Creating folders for persisting kafka state between runs'
        mkdir -p /ProjectDir/ContainerData/Kafka

        echo 'Creating folders for persisting zookeepers state between runs'

        mkdir -p /ProjectDir/ContainerData/Kafka/ZooKeepers

        mkdir -p /ProjectDir/ContainerData/Kafka/ZooKeepers/ZooKeeper1
        mkdir -p /ProjectDir/ContainerData/Kafka/ZooKeepers/ZooKeeper1/Data
        mkdir -p /ProjectDir/ContainerData/Kafka/ZooKeepers/ZooKeeper1/Logs

        mkdir -p /ProjectDir/ContainerData/Kafka/ZooKeepers/ZooKeeper2
        mkdir -p /ProjectDir/ContainerData/Kafka/ZooKeepers/ZooKeeper2/Data
        mkdir -p /ProjectDir/ContainerData/Kafka/ZooKeepers/ZooKeeper2/Logs

        mkdir -p /ProjectDir/ContainerData/Kafka/ZooKeepers/ZooKeeper3
        mkdir -p /ProjectDir/ContainerData/Kafka/ZooKeepers/ZooKeeper3/Data
        mkdir -p /ProjectDir/ContainerData/Kafka/ZooKeepers/ZooKeeper3/Logs

        mkdir -p /ProjectDir/ContainerData/Kafka/ZooKeepers/QuorumWaiter

        echo 'Creating folders for persisting kafka brokers state between runs'

        mkdir -p /ProjectDir/ContainerData/Kafka/Brokers

        mkdir -p /ProjectDir/ContainerData/Kafka/Brokers/Broker1
        mkdir -p /ProjectDir/ContainerData/Kafka/Brokers/Broker1/Data

        mkdir -p /ProjectDir/ContainerData/Kafka/Brokers/Broker2
        mkdir -p /ProjectDir/ContainerData/Kafka/Brokers/Broker2/Data

        mkdir -p /ProjectDir/ContainerData/Kafka/Brokers/Broker3
        mkdir -p /ProjectDir/ContainerData/Kafka/Brokers/Broker3/Data
        echo '================ Done Creating Output Directory with gitignore ===='

  create-certificate-authority:
    image: localhost/cert-creator:latest
    user: 1000:1001
    build:
      context: .
      dockerfile_inline: |
        FROM debian:stable-slim

        RUN apt-get update \
            && apt-get install -y curl \
            && apt-get install -y sed \
            && apt-get install -y openssl \
            && apt-get install -y coreutils \
            && apt-get install -y tar
        # `apt-get install -y base64` is replaced with `apt-get install -y coreutils`
    container_name: create-certificate-authority
    depends_on:
      set-up-container-mount-area:
        required: true
        restart: false
        condition: service_completed_successfully
    volumes:
      - ./ContainerData:/ContainerData
    environment:
      RECREATE_IF_EXISTS: "false"
    entrypoint:
      - '/bin/bash'
      - '-c'
      - |
        echo '================ Setting Up Variables ============================='
        ENV_NAME='lokalmaskin'
        VALIDITY_DAYS='365'
        # Default to 1024, because 4096 is noticeably slow to humans, and default mode here is demo
        RSA_BITS='1024'
        CERT_PASSWORD_LENGTH='32'

        CA_PASSWORD_PATH='/ContainerData/GeneratedCerts/CertificateAuthority/password.txt'
        CA_KEY_PATH='/ContainerData/GeneratedCerts/CertificateAuthority/ca.key'
        CA_CRT_FILE_NAME='ca.crt'
        CA_CRT_PATH='/ContainerData/GeneratedCerts/CertificateAuthority/'$$CA_CRT_FILE_NAME
        echo '================ Done Setting Up Variables ========================'

        if [ -f $$CA_CRT_PATH ] && [ ''$$RECREATE_IF_EXISTS != 'true' ]; then
          echo 'CA CRT file exists, and recreation not set to true, exiting without creating CA'
          exit 0
        fi

        echo '================ Creating CA ======================================'
        rm -rf /ContainerData/GeneratedCerts/CertificateAuthority
        mkdir -p /ContainerData/GeneratedCerts/CertificateAuthority
        cd /ContainerData/GeneratedCerts/CertificateAuthority

        CA_PASSWORD=$(tr -dc 'A-Za-z0-9!$%&()*+,-./<>?@[\]^_{|}~' </dev/urandom | head -c $$CERT_PASSWORD_LENGTH; echo)
        # CA_PASSWORD=This_is_guaranteed_to_work!1

        echo $$CA_PASSWORD > $$CA_PASSWORD_PATH

        # echo 'The generated password of the day is:'
        # cat '$$CA_PASSWORD_PATH'
        # # echo 'the variable was'
        # # echo $$CA_PASSWORD
        # echo 'END The generated password of the day'

        openssl req \
          -new \
          -x509 \
          -keyout $$CA_KEY_PATH \
          -newkey 'rsa:'$$RSA_BITS \
          -out $$CA_CRT_PATH \
          -days $$VALIDITY_DAYS \
          -subj '/CN=ca-'$$ENV_NAME'.example.com' \
          -passin pass:$$CA_PASSWORD \
          -passout file:$$CA_PASSWORD_PATH 2> /dev/null

        echo '================ Done Creating CA ================================='

  create-certificates:
    image: localhost/cert-creator:latest
    user: 1000:1001
    build:
      context: .
      dockerfile_inline: |
        FROM debian:stable-slim

        RUN apt-get update \
            && apt-get install -y curl \
            && apt-get install -y sed \
            && apt-get install -y openssl \
            && apt-get install -y coreutils \
            && apt-get install -y tar
        # `apt-get install -y base64` is replaced with `apt-get install -y coreutils`
    container_name: create-certificates
    depends_on:
      create-certificate-authority:
        required: true
        restart: false
        condition: service_completed_successfully
    volumes:
      - ./ContainerData:/ContainerData
    environment:
      RECREATE_IF_EXISTS: "false"
    entrypoint:
      - '/bin/bash'
      - '-c'
      - |
        if [ -f /ContainerData/GeneratedCerts/Kafka/Brokers/Broker1/broker1.lokalmaskin.crt ] && [ ''$$RECREATE_IF_EXISTS != 'true' ]; then
          echo 'Because Broker1s CRT file exists assuming that all other certs also exist, and recreation not set to true, exiting without creating any certs'
          exit 0
        fi
        echo '================ Setting Up Variables ============================='
        ENV_NAME='lokalmaskin'
        VALIDITY_DAYS='365'
        # Default to 1024, because 4096 is noticeably slow to humans, and default mode here is demo
        RSA_BITS='1024'
        CERT_PASSWORD_LENGTH='32'
        USE_DEMO_PASSWORDS='true'

        CA_PASSWORD_PATH='/ContainerData/GeneratedCerts/CertificateAuthority/password.txt'
        CA_KEY_PATH='/ContainerData/GeneratedCerts/CertificateAuthority/ca.key'
        CA_CRT_FILE_NAME='ca.crt'
        CA_CRT_PATH='/ContainerData/GeneratedCerts/CertificateAuthority/'$$CA_CRT_FILE_NAME

        # Enables 1 acl for all brokers
        BROKERS_CN='broker'

        # For each zookeeper and broker, specify the addresses it's supposed to answer on, so that it may present a vaild identity for the endpoint.
        # If you need names, like for docker compose/kubernetes internal networks or urls, like broker1 or broker1.kafka.example.com, put them in a DNS alt name in your certificate signing request config.
        # If your clients use IP addresses for finding their bootstrap servers, put them in an IP alt name.

        BROKER_1_DNS_1='broker1'
        BROKER_1_DNS_2='broker1.'$$ENV_NAME
        BROKER_1_DNS_3='localhost'
        # Addresses on broker network
        BROKER_1_IP_1='172.90.92.11'
        BROKER_1_IP_2='2001:9092:9092::11'
        # Addresses on zookeeper network
        BROKER_1_IP_3='172.21.82.21'
        BROKER_1_IP_4='2001:2181:2181::21'
        # Addresses on app network
        BROKER_1_IP_5='172.80.80.11'
        BROKER_1_IP_6='2001:8080:8080::11'

        BROKER_2_DNS_1='broker2'
        BROKER_2_DNS_2='broker2.'$$ENV_NAME
        BROKER_2_DNS_3='localhost'
        # Addresses on broker network
        BROKER_2_IP_1='172.90.92.12'
        BROKER_2_IP_2='2001:9092:9092::12'
        # Addresses on zookeeper network
        BROKER_2_IP_3='172.21.82.22'
        BROKER_2_IP_4='2001:2181:2181::22'
        # Addresses on app network
        BROKER_2_IP_5='172.80.80.12'
        BROKER_2_IP_6='2001:8080:8080::12'

        BROKER_3_DNS_1='broker3'
        BROKER_3_DNS_2='broker3.'$$ENV_NAME
        BROKER_3_DNS_3='localhost'
        # Addresses on broker network
        BROKER_3_IP_1='172.90.92.13'
        BROKER_3_IP_2='2001:9092:9092::13'
        # Addresses on zookeeper network
        BROKER_3_IP_3='172.21.82.23'
        BROKER_3_IP_4='2001:2181:2181::23'
        # Addresses on app network
        BROKER_3_IP_5='172.80.80.13'
        BROKER_3_IP_6='2001:8080:8080::13'

        echo '================ Done Setting Up Variables ========================'

        echo '================ Creating Certs for Broker1 ===================='
        echo 'Cleaning and setting up folder structure for broker 1 certificate'
        rm -rf /ContainerData/GeneratedCerts/Kafka/Brokers/Broker1
        mkdir -p /ContainerData/GeneratedCerts/Kafka/Brokers/Broker1
        cd /ContainerData/GeneratedCerts/Kafka/Brokers/Broker1

        echo 'Setting up password for broker 1 certificate'
        BROKER_1_PASSWORD=$(tr -dc 'A-Za-z0-9!$%&()*+,-./<>?@[\]^_{|}~' </dev/urandom | head -c $$CERT_PASSWORD_LENGTH; echo)
        if [ ''$$USE_DEMO_PASSWORDS == 'true' ]; then
          echo 'WARNING: Setting up local demo password for broker 1 certificate'
          BROKER_1_PASSWORD='Broker_1_demo_password'
        fi
        echo $$BROKER_1_PASSWORD > '/ContainerData/GeneratedCerts/Kafka/Brokers/Broker1/password.txt'

        echo 'Creating private key for broker 1 certificate'
        openssl genrsa \
          -passout file:/ContainerData/GeneratedCerts/Kafka/Brokers/Broker1/password.txt \
          -out /ContainerData/GeneratedCerts/Kafka/Brokers/Broker1/acl-principal.key $$RSA_BITS

        echo 'Creating certificate signing request config for broker 1 certificate'
        printf '%s\n' \
          '[req]' \
          'default_bits = '$$RSA_BITS \
          'prompt = no' \
          'default_md = sha512' \
          'distinguished_name = req_distinguished_name' \
          'x509_extensions = v3_req' \
          '' \
          '[req_distinguished_name]' \
          '' \
          '[v3_req]' \
          'basicConstraints=CA:FALSE' \
          'subjectAltName = @alt_names' \
          '' \
          '[alt_names]' \
          'DNS.1 = '$$BROKER_1_DNS_1 \
          'DNS.2 = '$$BROKER_1_DNS_2 \
          'DNS.3 = '$$BROKER_1_DNS_3 \
          'IP.1 = '$$BROKER_1_IP_1 \
          'IP.2 = '$$BROKER_1_IP_2 \
          'IP.3 = '$$BROKER_1_IP_3 \
          'IP.4 = '$$BROKER_1_IP_4 \
          'IP.5 = '$$BROKER_1_IP_5 \
          'IP.6 = '$$BROKER_1_IP_6 > /ContainerData/GeneratedCerts/Kafka/Brokers/Broker1/acl-principal.csr.config

        echo 'Creating certificate signing request for broker 1 certificate'
        openssl req \
          -new \
          -key /ContainerData/GeneratedCerts/Kafka/Brokers/Broker1/acl-principal.key \
          -subj '/CN='$$BROKERS_CN \
          -out /ContainerData/GeneratedCerts/Kafka/Brokers/Broker1/acl-principal.csr \
          -config /ContainerData/GeneratedCerts/Kafka/Brokers/Broker1/acl-principal.csr.config

        echo 'Creating and signing certificate for broker 1'
        openssl x509 \
          -req \
          -CA $$CA_CRT_PATH \
          -CAkey $$CA_KEY_PATH \
          -passin file:$$CA_PASSWORD_PATH \
          -in /ContainerData/GeneratedCerts/Kafka/Brokers/Broker1/acl-principal.csr \
          -out /ContainerData/GeneratedCerts/Kafka/Brokers/Broker1/acl-principal.crt \
          -days $$VALIDITY_DAYS \
          -CAcreateserial \
          -extensions v3_req \
          -extfile /ContainerData/GeneratedCerts/Kafka/Brokers/Broker1/acl-principal.csr.config

        echo 'Creating pkcs12 certificate bundle for broker 1'
        openssl pkcs12 \
          -inkey /ContainerData/GeneratedCerts/Kafka/Brokers/Broker1/acl-principal.key \
          -in /ContainerData/GeneratedCerts/Kafka/Brokers/Broker1/acl-principal.crt \
          -passin pass:$$BROKER_1_PASSWORD \
          -passout pass:$$BROKER_1_PASSWORD \
          -export \
          -out /ContainerData/GeneratedCerts/Kafka/Brokers/Broker1/acl-principal.pfx

        echo 'Copying CA certificate/public key to broker 1 folder'
        cp $$CA_CRT_PATH /ContainerData/GeneratedCerts/Kafka/Brokers/Broker1/

        echo 'Creating bootstrap config file for broker 1'
        printf '%s\n' \
          'security.protocol=SSL' \
          'ssl.keystore.location=acl-principal.pfx' \
          'ssl.keystore.password='$$BROKER_1_PASSWORD \
          'ssl.keystore.type=PKCS12' \
          'ssl.truststore.type=PEM' \
          'ssl.truststore.location='$$CA_CRT_FILE_NAME > /ContainerData/GeneratedCerts/Kafka/Brokers/Broker1/bootstrap.conf
        echo '================ Done Creating Certs for Broker1 ==============='

        echo '================ Creating Certs for Broker2 ===================='
        echo 'Cleaning and setting up folder structure for broker 2 certificate'
        rm -rf /ContainerData/GeneratedCerts/Kafka/Brokers/Broker2
        mkdir -p /ContainerData/GeneratedCerts/Kafka/Brokers/Broker2
        cd /ContainerData/GeneratedCerts/Kafka/Brokers/Broker2

        echo 'Setting up password for broker 2 certificate'
        BROKER_2_PASSWORD=$(tr -dc 'A-Za-z0-9!$%&()*+,-./<>?@[\]^_{|}~' </dev/urandom | head -c $$CERT_PASSWORD_LENGTH; echo)
        if [ ''$$USE_DEMO_PASSWORDS == 'true' ]; then
          echo 'WARNING: Setting up local demo password for broker 2 certificate'
          BROKER_2_PASSWORD='Broker_2_demo_password'
        fi
        echo $$BROKER_2_PASSWORD > '/ContainerData/GeneratedCerts/Kafka/Brokers/Broker2/password.txt'

        echo 'Creating private key for broker 2 certificate'
        openssl genrsa \
          -passout file:/ContainerData/GeneratedCerts/Kafka/Brokers/Broker2/password.txt \
          -out /ContainerData/GeneratedCerts/Kafka/Brokers/Broker2/acl-principal.key $$RSA_BITS

        echo 'Creating certificate signing request config for broker 2 certificate'
        printf '%s\n' \
          '[req]' \
          'default_bits = '$$RSA_BITS \
          'prompt = no' \
          'default_md = sha512' \
          'distinguished_name = req_distinguished_name' \
          'x509_extensions = v3_req' \
          '' \
          '[req_distinguished_name]' \
          '' \
          '[v3_req]' \
          'basicConstraints=CA:FALSE' \
          'subjectAltName = @alt_names' \
          '' \
          '[alt_names]' \
          'DNS.1 = '$$BROKER_2_DNS_1 \
          'DNS.2 = '$$BROKER_2_DNS_2 \
          'DNS.3 = '$$BROKER_2_DNS_3 \
          'IP.1 = '$$BROKER_2_IP_1 \
          'IP.2 = '$$BROKER_2_IP_2 \
          'IP.3 = '$$BROKER_2_IP_3 \
          'IP.4 = '$$BROKER_2_IP_4 \
          'IP.5 = '$$BROKER_2_IP_5 \
          'IP.6 = '$$BROKER_2_IP_6 > /ContainerData/GeneratedCerts/Kafka/Brokers/Broker2/acl-principal.csr.config

        echo 'Creating certificate signing request for broker 2 certificate'
        openssl req \
          -new \
          -key /ContainerData/GeneratedCerts/Kafka/Brokers/Broker2/acl-principal.key \
          -subj '/CN='$$BROKERS_CN \
          -out /ContainerData/GeneratedCerts/Kafka/Brokers/Broker2/acl-principal.csr \
          -config /ContainerData/GeneratedCerts/Kafka/Brokers/Broker2/acl-principal.csr.config

        echo 'Creating and signing certificate for broker 2'
        openssl x509 \
          -req \
          -CA $$CA_CRT_PATH \
          -CAkey $$CA_KEY_PATH \
          -passin file:$$CA_PASSWORD_PATH \
          -in /ContainerData/GeneratedCerts/Kafka/Brokers/Broker2/acl-principal.csr \
          -out /ContainerData/GeneratedCerts/Kafka/Brokers/Broker2/acl-principal.crt \
          -days $$VALIDITY_DAYS \
          -CAcreateserial \
          -extensions v3_req \
          -extfile /ContainerData/GeneratedCerts/Kafka/Brokers/Broker2/acl-principal.csr.config

        echo 'Creating pkcs12 certificate bundle for broker 2'
        openssl pkcs12 \
          -inkey /ContainerData/GeneratedCerts/Kafka/Brokers/Broker2/acl-principal.key \
          -in /ContainerData/GeneratedCerts/Kafka/Brokers/Broker2/acl-principal.crt \
          -passin pass:$$BROKER_2_PASSWORD \
          -passout pass:$$BROKER_2_PASSWORD \
          -export \
          -out /ContainerData/GeneratedCerts/Kafka/Brokers/Broker2/acl-principal.pfx

        echo 'Copying CA certificate/public key to broker 2 folder'
        cp $$CA_CRT_PATH /ContainerData/GeneratedCerts/Kafka/Brokers/Broker2/

        echo 'Creating bootstrap config file for broker 2'
        printf '%s\n' \
          'security.protocol=SSL' \
          'ssl.keystore.location=acl-principal.pfx' \
          'ssl.keystore.password='$$BROKER_2_PASSWORD \
          'ssl.keystore.type=PKCS12' \
          'ssl.truststore.type=PEM' \
          'ssl.truststore.location='$$CA_CRT_FILE_NAME > /ContainerData/GeneratedCerts/Kafka/Brokers/Broker2/bootstrap.conf
        echo '================ Done Creating Certs for Broker2 ==============='

        echo '================ Creating Certs for Broker3 ===================='
        echo 'Cleaning and setting up folder structure for broker 3 certificate'
        rm -rf /ContainerData/GeneratedCerts/Kafka/Brokers/Broker3
        mkdir -p /ContainerData/GeneratedCerts/Kafka/Brokers/Broker3
        cd /ContainerData/GeneratedCerts/Kafka/Brokers/Broker3

        echo 'Setting up password for broker 3 certificate'
        BROKER_3_PASSWORD=$(tr -dc 'A-Za-z0-9!$%&()*+,-./<>?@[\]^_{|}~' </dev/urandom | head -c $$CERT_PASSWORD_LENGTH; echo)
        if [ ''$$USE_DEMO_PASSWORDS == 'true' ]; then
          echo 'WARNING: Setting up local demo password for broker 3 certificate'
          BROKER_3_PASSWORD='Broker_3_demo_password'
        fi
        echo $$BROKER_3_PASSWORD > '/ContainerData/GeneratedCerts/Kafka/Brokers/Broker3/password.txt'

        echo 'Creating private key for broker 3 certificate'
        openssl genrsa \
          -passout file:/ContainerData/GeneratedCerts/Kafka/Brokers/Broker3/password.txt \
          -out /ContainerData/GeneratedCerts/Kafka/Brokers/Broker3/acl-principal.key $$RSA_BITS

        echo 'Creating certificate signing request config for broker 3 certificate'
        printf '%s\n' \
          '[req]' \
          'default_bits = '$$RSA_BITS \
          'prompt = no' \
          'default_md = sha512' \
          'distinguished_name = req_distinguished_name' \
          'x509_extensions = v3_req' \
          '' \
          '[req_distinguished_name]' \
          '' \
          '[v3_req]' \
          'basicConstraints=CA:FALSE' \
          'subjectAltName = @alt_names' \
          '' \
          '[alt_names]' \
          'DNS.1 = '$$BROKER_3_DNS_1 \
          'DNS.2 = '$$BROKER_3_DNS_2 \
          'DNS.3 = '$$BROKER_3_DNS_3 \
          'IP.1 = '$$BROKER_3_IP_1 \
          'IP.2 = '$$BROKER_3_IP_2 \
          'IP.3 = '$$BROKER_3_IP_3 \
          'IP.4 = '$$BROKER_3_IP_4 \
          'IP.5 = '$$BROKER_3_IP_5 \
          'IP.6 = '$$BROKER_3_IP_6 > /ContainerData/GeneratedCerts/Kafka/Brokers/Broker3/acl-principal.csr.config

        echo 'Creating certificate signing request for broker 3 certificate'
        openssl req \
          -new \
          -key /ContainerData/GeneratedCerts/Kafka/Brokers/Broker3/acl-principal.key \
          -subj '/CN='$$BROKERS_CN \
          -out /ContainerData/GeneratedCerts/Kafka/Brokers/Broker3/acl-principal.csr \
          -config /ContainerData/GeneratedCerts/Kafka/Brokers/Broker3/acl-principal.csr.config

        echo 'Creating and signing certificate for broker 3'
        openssl x509 \
          -req \
          -CA $$CA_CRT_PATH \
          -CAkey $$CA_KEY_PATH \
          -passin file:$$CA_PASSWORD_PATH \
          -in /ContainerData/GeneratedCerts/Kafka/Brokers/Broker3/acl-principal.csr \
          -out /ContainerData/GeneratedCerts/Kafka/Brokers/Broker3/acl-principal.crt \
          -days $$VALIDITY_DAYS \
          -CAcreateserial \
          -extensions v3_req \
          -extfile /ContainerData/GeneratedCerts/Kafka/Brokers/Broker3/acl-principal.csr.config

        echo 'Creating pkcs12 certificate bundle for broker 3'
        openssl pkcs12 \
          -inkey /ContainerData/GeneratedCerts/Kafka/Brokers/Broker3/acl-principal.key \
          -in /ContainerData/GeneratedCerts/Kafka/Brokers/Broker3/acl-principal.crt \
          -passin pass:$$BROKER_3_PASSWORD \
          -passout pass:$$BROKER_3_PASSWORD \
          -export \
          -out /ContainerData/GeneratedCerts/Kafka/Brokers/Broker3/acl-principal.pfx

        echo 'Copying CA certificate/public key to broker 3 folder'
        cp $$CA_CRT_PATH /ContainerData/GeneratedCerts/Kafka/Brokers/Broker3/

        echo 'Creating bootstrap config file for broker 3'
        printf '%s\n' \
          'security.protocol=SSL' \
          'ssl.keystore.location=acl-principal.pfx' \
          'ssl.keystore.password='$$BROKER_3_PASSWORD \
          'ssl.keystore.type=PKCS12' \
          'ssl.truststore.type=PEM' \
          'ssl.truststore.location='$$CA_CRT_FILE_NAME > /ContainerData/GeneratedCerts/Kafka/Brokers/Broker3/bootstrap.conf
        echo '================ Done Creating Certs for Broker3 ==============='

        echo '================ Creating Certs for Kafka UI ==================='
        echo 'Cleaning and setting up folder structure for Kafka UI certificate'
        rm -rf /ContainerData/GeneratedCerts/Kafka/Users/KafkaUi
        mkdir -p /ContainerData/GeneratedCerts/Kafka/Users/KafkaUi
        cd /ContainerData/GeneratedCerts/Kafka/Users/KafkaUi

        echo 'Setting up password for Kafka UI certificate'
        KAFKA_UI_PASSWORD=$(tr -dc 'A-Za-z0-9!$%&()*+,-./<>?@[\]^_{|}~' </dev/urandom | head -c $$CERT_PASSWORD_LENGTH; echo)
        if [ ''$$USE_DEMO_PASSWORDS == 'true' ]; then
          echo 'WARNING: Setting up local demo password for Kafka UI certificate'
          KAFKA_UI_PASSWORD='Kafka_UI_users_demo_password'
        fi
        echo $$KAFKA_UI_PASSWORD > '/ContainerData/GeneratedCerts/Kafka/Users/KafkaUi/password.txt'

        echo 'Creating private key for Kafka UI certificate'
        openssl genrsa \
          -passout file:/ContainerData/GeneratedCerts/Kafka/Users/KafkaUi/password.txt \
          -out /ContainerData/GeneratedCerts/Kafka/Users/KafkaUi/acl-principal.key $$RSA_BITS

        echo 'Creating certificate signing request config for Kafka UI certificate'
        printf '%s\n' \
          '[req]' \
          'default_bits = '$$RSA_BITS \
          'prompt = no' \
          'default_md = sha512' \
          'distinguished_name = req_distinguished_name' \
          'x509_extensions = v3_req' \
          '' \
          '[req_distinguished_name]' \
          '' \
          '[v3_req]' \
          'basicConstraints=CA:FALSE' > /ContainerData/GeneratedCerts/Kafka/Users/KafkaUi/acl-principal.csr.config

        echo 'Creating certificate signing request for Kafka UI certificate'
        openssl req \
          -new \
          -key /ContainerData/GeneratedCerts/Kafka/Users/KafkaUi/acl-principal.key \
          -subj '/CN=kafka-ui' \
          -out /ContainerData/GeneratedCerts/Kafka/Users/KafkaUi/acl-principal.csr \
          -config /ContainerData/GeneratedCerts/Kafka/Users/KafkaUi/acl-principal.csr.config

        echo 'Creating and signing certificate for Kafka UI'
        openssl x509 \
          -req \
          -CA $$CA_CRT_PATH \
          -CAkey $$CA_KEY_PATH \
          -passin file:$$CA_PASSWORD_PATH \
          -in /ContainerData/GeneratedCerts/Kafka/Users/KafkaUi/acl-principal.csr \
          -out /ContainerData/GeneratedCerts/Kafka/Users/KafkaUi/acl-principal.crt \
          -days $$VALIDITY_DAYS \
          -CAcreateserial \
          -extensions v3_req \
          -extfile /ContainerData/GeneratedCerts/Kafka/Users/KafkaUi/acl-principal.csr.config

        echo 'Creating pkcs12 certificate bundle for Kafka UI'
        openssl pkcs12 \
          -inkey /ContainerData/GeneratedCerts/Kafka/Users/KafkaUi/acl-principal.key \
          -in /ContainerData/GeneratedCerts/Kafka/Users/KafkaUi/acl-principal.crt \
          -passin pass:$$KAFKA_UI_PASSWORD \
          -passout pass:$$KAFKA_UI_PASSWORD \
          -export \
          -out /ContainerData/GeneratedCerts/Kafka/Users/KafkaUi/acl-principal.pfx

        echo 'Copying CA certificate/public key to Kafka UI folder'
        cp $$CA_CRT_PATH /ContainerData/GeneratedCerts/Kafka/Users/KafkaUi/
        echo '================ Done Creating Certs for Kafka UI =============='

        echo '================ Creating Certs for Schema Registry ============'
        echo 'Cleaning and setting up folder structure for Schema Registry certificate'
        rm -rf /ContainerData/GeneratedCerts/Kafka/Users/SchemaRegistry
        mkdir -p /ContainerData/GeneratedCerts/Kafka/Users/SchemaRegistry
        cd /ContainerData/GeneratedCerts/Kafka/Users/SchemaRegistry

        echo 'Setting up password for Schema Registry certificate'
        SCHEMA_REGISTRY_PASSWORD=$(tr -dc 'A-Za-z0-9!$%&()*+,-./<>?@[\]^_{|}~' </dev/urandom | head -c $$CERT_PASSWORD_LENGTH; echo)
        if [ ''$$USE_DEMO_PASSWORDS == 'true' ]; then
          echo 'WARNING: Setting up local demo password for Schema Registry certificate'
          SCHEMA_REGISTRY_PASSWORD='Schema_Registry_users_demo_password'
        fi
        echo $$SCHEMA_REGISTRY_PASSWORD > '/ContainerData/GeneratedCerts/Kafka/Users/SchemaRegistry/password.txt'

        echo 'Creating private key for Schema Registry certificate'
        openssl genrsa \
          -passout file:/ContainerData/GeneratedCerts/Kafka/Users/SchemaRegistry/password.txt \
          -out /ContainerData/GeneratedCerts/Kafka/Users/SchemaRegistry/acl-principal.key $$RSA_BITS

        echo 'Creating certificate signing request config for Schema Registry certificate'
        printf '%s\n' \
          '[req]' \
          'default_bits = '$$RSA_BITS \
          'prompt = no' \
          'default_md = sha512' \
          'distinguished_name = req_distinguished_name' \
          'x509_extensions = v3_req' \
          '' \
          '[req_distinguished_name]' \
          '' \
          '[v3_req]' \
          'basicConstraints=CA:FALSE' > /ContainerData/GeneratedCerts/Kafka/Users/SchemaRegistry/acl-principal.csr.config

        echo 'Creating certificate signing request for Schema Registry certificate'
        openssl req \
          -new \
          -key /ContainerData/GeneratedCerts/Kafka/Users/SchemaRegistry/acl-principal.key \
          -subj '/CN=schema-registry' \
          -out /ContainerData/GeneratedCerts/Kafka/Users/SchemaRegistry/acl-principal.csr \
          -config /ContainerData/GeneratedCerts/Kafka/Users/SchemaRegistry/acl-principal.csr.config

        echo 'Creating and signing certificate for Schema Registry'
        openssl x509 \
          -req \
          -CA $$CA_CRT_PATH \
          -CAkey $$CA_KEY_PATH \
          -passin file:$$CA_PASSWORD_PATH \
          -in /ContainerData/GeneratedCerts/Kafka/Users/SchemaRegistry/acl-principal.csr \
          -out /ContainerData/GeneratedCerts/Kafka/Users/SchemaRegistry/acl-principal.crt \
          -days $$VALIDITY_DAYS \
          -CAcreateserial \
          -extensions v3_req \
          -extfile /ContainerData/GeneratedCerts/Kafka/Users/SchemaRegistry/acl-principal.csr.config

        echo 'Creating pkcs12 certificate bundle for Schema Registry'
        openssl pkcs12 \
          -inkey /ContainerData/GeneratedCerts/Kafka/Users/SchemaRegistry/acl-principal.key \
          -in /ContainerData/GeneratedCerts/Kafka/Users/SchemaRegistry/acl-principal.crt \
          -passin pass:$$SCHEMA_REGISTRY_PASSWORD \
          -passout pass:$$SCHEMA_REGISTRY_PASSWORD \
          -export \
          -out /ContainerData/GeneratedCerts/Kafka/Users/SchemaRegistry/acl-principal.pfx

        echo 'Copying CA certificate/public key to Schema Registry folder'
        cp $$CA_CRT_PATH /ContainerData/GeneratedCerts/Kafka/Users/SchemaRegistry/
        echo '================ Done Creating Certs for Schema Registry ======='

        echo '================ Creating Certs for Admin User ================='
        echo 'Cleaning and setting up folder structure for admin user certificate'
        rm -rf /ContainerData/GeneratedCerts/Kafka/Users/Admin
        mkdir -p /ContainerData/GeneratedCerts/Kafka/Users/Admin
        cd /ContainerData/GeneratedCerts/Kafka/Users/Admin

        echo 'Setting up password for admin user certificate'
        ADMIN_USER_PASSWORD=$(tr -dc 'A-Za-z0-9!$%&()*+,-./<>?@[\]^_{|}~' </dev/urandom | head -c $$CERT_PASSWORD_LENGTH; echo)
        echo $$ADMIN_USER_PASSWORD > '/ContainerData/GeneratedCerts/Kafka/Users/Admin/password.txt'

        echo 'Creating private key for admin user certificate'
        openssl genrsa \
          -passout file:/ContainerData/GeneratedCerts/Kafka/Users/Admin/password.txt \
          -out /ContainerData/GeneratedCerts/Kafka/Users/Admin/acl-principal.key $$RSA_BITS

        echo 'Creating certificate signing request config for admin user certificate'
        printf '%s\n' \
          '[req]' \
          'default_bits = '$$RSA_BITS \
          'prompt = no' \
          'default_md = sha512' \
          'distinguished_name = req_distinguished_name' \
          'x509_extensions = v3_req' \
          '' \
          '[req_distinguished_name]' \
          '' \
          '[v3_req]' \
          'basicConstraints=CA:FALSE' > /ContainerData/GeneratedCerts/Kafka/Users/Admin/acl-principal.csr.config

        echo 'Creating certificate signing request for admin user certificate'
        openssl req \
          -new \
          -key /ContainerData/GeneratedCerts/Kafka/Users/Admin/acl-principal.key \
          -subj '/CN=admin' \
          -out /ContainerData/GeneratedCerts/Kafka/Users/Admin/acl-principal.csr \
          -config /ContainerData/GeneratedCerts/Kafka/Users/Admin/acl-principal.csr.config

        echo 'Creating and signing certificate for admin user'
        openssl x509 \
          -req \
          -CA $$CA_CRT_PATH \
          -CAkey $$CA_KEY_PATH \
          -passin file:$$CA_PASSWORD_PATH \
          -in /ContainerData/GeneratedCerts/Kafka/Users/Admin/acl-principal.csr \
          -out /ContainerData/GeneratedCerts/Kafka/Users/Admin/acl-principal.crt \
          -days $$VALIDITY_DAYS \
          -CAcreateserial \
          -extensions v3_req \
          -extfile /ContainerData/GeneratedCerts/Kafka/Users/Admin/acl-principal.csr.config

        echo 'Creating pkcs12 certificate bundle for admin user'
        openssl pkcs12 \
          -inkey /ContainerData/GeneratedCerts/Kafka/Users/Admin/acl-principal.key \
          -in /ContainerData/GeneratedCerts/Kafka/Users/Admin/acl-principal.crt \
          -passin pass:$$ADMIN_USER_PASSWORD \
          -passout pass:$$ADMIN_USER_PASSWORD \
          -export \
          -out /ContainerData/GeneratedCerts/Kafka/Users/Admin/acl-principal.pfx

        echo 'Copying CA certificate/public key to admin user folder'
        cp $$CA_CRT_PATH /ContainerData/GeneratedCerts/Kafka/Users/Admin/

        echo 'Creating admin client config file for admin user'
        printf '%s\n' \
          'security.protocol=SSL' \
          'ssl.keystore.location=acl-principal.pfx' \
          'ssl.keystore.password='$$ADMIN_USER_PASSWORD \
          'ssl.keystore.type=PKCS12' \
          'ssl.truststore.type=PEM' \
          'ssl.truststore.location='$$CA_CRT_FILE_NAME > /ContainerData/GeneratedCerts/Kafka/Users/Admin/adminclient-configs.conf
        echo '================ Done Creating Certs for Admin User ============'

        echo '================ Creating Certs for Demo Producer User ========='
        echo 'Cleaning and setting up folder structure for demo producer user certificate'
        rm -rf /ContainerData/GeneratedCerts/Kafka/Users/DemoProducer
        mkdir -p /ContainerData/GeneratedCerts/Kafka/Users/DemoProducer
        cd /ContainerData/GeneratedCerts/Kafka/Users/DemoProducer

        echo 'Setting up password for demo producer user certificate'
        DEMO_PRODUCER_USER_PASSWORD=$(tr -dc 'A-Za-z0-9!$%&()*+,-./<>?@[\]^_{|}~' </dev/urandom | head -c $$CERT_PASSWORD_LENGTH; echo)
        echo $$DEMO_PRODUCER_USER_PASSWORD > '/ContainerData/GeneratedCerts/Kafka/Users/DemoProducer/password.txt'

        echo 'Creating private key for demo producer user certificate'
        openssl genrsa \
          -passout file:/ContainerData/GeneratedCerts/Kafka/Users/DemoProducer/password.txt \
          -out /ContainerData/GeneratedCerts/Kafka/Users/DemoProducer/acl-principal.key $$RSA_BITS

        echo 'Creating certificate signing request config for demo producer user certificate'
        printf '%s\n' \
          '[req]' \
          'default_bits = '$$RSA_BITS \
          'prompt = no' \
          'default_md = sha512' \
          'distinguished_name = req_distinguished_name' \
          'x509_extensions = v3_req' \
          '' \
          '[req_distinguished_name]' \
          '' \
          '[v3_req]' \
          'basicConstraints=CA:FALSE' > /ContainerData/GeneratedCerts/Kafka/Users/DemoProducer/acl-principal.csr.config

        echo 'Creating certificate signing request for demo producer user certificate'
        openssl req \
          -new \
          -key /ContainerData/GeneratedCerts/Kafka/Users/DemoProducer/acl-principal.key \
          -subj '/CN=demo-producer' \
          -out /ContainerData/GeneratedCerts/Kafka/Users/DemoProducer/acl-principal.csr \
          -config /ContainerData/GeneratedCerts/Kafka/Users/DemoProducer/acl-principal.csr.config

        echo 'Creating and signing certificate for demo producer user'
        openssl x509 \
          -req \
          -CA $$CA_CRT_PATH \
          -CAkey $$CA_KEY_PATH \
          -passin file:$$CA_PASSWORD_PATH \
          -in /ContainerData/GeneratedCerts/Kafka/Users/DemoProducer/acl-principal.csr \
          -out /ContainerData/GeneratedCerts/Kafka/Users/DemoProducer/acl-principal.crt \
          -days $$VALIDITY_DAYS \
          -CAcreateserial \
          -extensions v3_req \
          -extfile /ContainerData/GeneratedCerts/Kafka/Users/DemoProducer/acl-principal.csr.config

        echo 'Creating pkcs12 certificate bundle for demo producer user'
        openssl pkcs12 \
          -inkey /ContainerData/GeneratedCerts/Kafka/Users/DemoProducer/acl-principal.key \
          -in /ContainerData/GeneratedCerts/Kafka/Users/DemoProducer/acl-principal.crt \
          -passin pass:$$DEMO_PRODUCER_USER_PASSWORD \
          -passout pass:$$DEMO_PRODUCER_USER_PASSWORD \
          -export \
          -out /ContainerData/GeneratedCerts/Kafka/Users/DemoProducer/acl-principal.pfx

        echo 'Copying CA certificate/public key to demo producer user folder'
        cp $$CA_CRT_PATH /ContainerData/GeneratedCerts/Kafka/Users/DemoProducer/

        echo 'Creating admin client config file for demo producer user'
        printf '%s\n' \
          'security.protocol=SSL' \
          'ssl.keystore.location=acl-principal.pfx' \
          'ssl.keystore.password='$$DEMO_PRODUCER_USER_PASSWORD \
          'ssl.keystore.type=PKCS12' \
          'ssl.truststore.type=PEM' \
          'ssl.truststore.location='$$CA_CRT_FILE_NAME > /ContainerData/GeneratedCerts/Kafka/Users/DemoProducer/adminclient-configs.conf
        echo '================ Done Creating Certs for Demo Producer User ===='

        echo '================ Creating Certs for Demo Consumer User ========='
        echo 'Cleaning and setting up folder structure for demo consumer user certificate'
        rm -rf /ContainerData/GeneratedCerts/Kafka/Users/DemoConsumer
        mkdir -p /ContainerData/GeneratedCerts/Kafka/Users/DemoConsumer
        cd /ContainerData/GeneratedCerts/Kafka/Users/DemoConsumer

        echo 'Setting up password for demo consumer user certificate'
        DEMO_CONSUMER_USER_PASSWORD=$(tr -dc 'A-Za-z0-9!$%&()*+,-./<>?@[\]^_{|}~' </dev/urandom | head -c $$CERT_PASSWORD_LENGTH; echo)
        echo $$DEMO_CONSUMER_USER_PASSWORD > '/ContainerData/GeneratedCerts/Kafka/Users/DemoConsumer/password.txt'

        echo 'Creating private key for demo consumer user certificate'
        openssl genrsa \
          -passout file:/ContainerData/GeneratedCerts/Kafka/Users/DemoConsumer/password.txt \
          -out /ContainerData/GeneratedCerts/Kafka/Users/DemoConsumer/acl-principal.key $$RSA_BITS

        echo 'Creating certificate signing request config for demo consumer user certificate'
        printf '%s\n' \
          '[req]' \
          'default_bits = '$$RSA_BITS \
          'prompt = no' \
          'default_md = sha512' \
          'distinguished_name = req_distinguished_name' \
          'x509_extensions = v3_req' \
          '' \
          '[req_distinguished_name]' \
          '' \
          '[v3_req]' \
          'basicConstraints=CA:FALSE' > /ContainerData/GeneratedCerts/Kafka/Users/DemoConsumer/acl-principal.csr.config

        echo 'Creating certificate signing request for demo consumer user certificate'
        openssl req \
          -new \
          -key /ContainerData/GeneratedCerts/Kafka/Users/DemoConsumer/acl-principal.key \
          -subj '/CN=demo-consumer' \
          -out /ContainerData/GeneratedCerts/Kafka/Users/DemoConsumer/acl-principal.csr \
          -config /ContainerData/GeneratedCerts/Kafka/Users/DemoConsumer/acl-principal.csr.config

        echo 'Creating and signing certificate for demo consumer user'
        openssl x509 \
          -req \
          -CA $$CA_CRT_PATH \
          -CAkey $$CA_KEY_PATH \
          -passin file:$$CA_PASSWORD_PATH \
          -in /ContainerData/GeneratedCerts/Kafka/Users/DemoConsumer/acl-principal.csr \
          -out /ContainerData/GeneratedCerts/Kafka/Users/DemoConsumer/acl-principal.crt \
          -days $$VALIDITY_DAYS \
          -CAcreateserial \
          -extensions v3_req \
          -extfile /ContainerData/GeneratedCerts/Kafka/Users/DemoConsumer/acl-principal.csr.config

        echo 'Creating pkcs12 certificate bundle for demo consumer user'
        openssl pkcs12 \
          -inkey /ContainerData/GeneratedCerts/Kafka/Users/DemoConsumer/acl-principal.key \
          -in /ContainerData/GeneratedCerts/Kafka/Users/DemoConsumer/acl-principal.crt \
          -passin pass:$$DEMO_CONSUMER_USER_PASSWORD \
          -passout pass:$$DEMO_CONSUMER_USER_PASSWORD \
          -export \
          -out /ContainerData/GeneratedCerts/Kafka/Users/DemoConsumer/acl-principal.pfx

        echo 'Copying CA certificate/public key to demo consumer user folder'
        cp $$CA_CRT_PATH /ContainerData/GeneratedCerts/Kafka/Users/DemoConsumer/

        echo 'Creating admin client config file for demo consumer user'
        printf '%s\n' \
          'security.protocol=SSL' \
          'ssl.keystore.location=acl-principal.pfx' \
          'ssl.keystore.password='$$DEMO_CONSUMER_USER_PASSWORD \
          'ssl.keystore.type=PKCS12' \
          'ssl.truststore.type=PEM' \
          'ssl.truststore.location='$$CA_CRT_FILE_NAME > /ContainerData/GeneratedCerts/Kafka/Users/DemoConsumer/adminclient-configs.conf
        echo '================ Done Creating Certs for Demo Consumer User ===='

  broker1:
    image: confluentinc/cp-kafka:7.5.0
    hostname: broker1
    container_name: broker1
    user: 1000:1001
    depends_on:
      create-certificates:
        required: true
        restart: false
        condition: service_completed_successfully
    networks:
      brokers_network:
        ipv4_address: 172.90.92.11
        ipv6_address: 2001:9092:9092::11
      controllers_network:
        ipv4_address: 172.21.82.21
        ipv6_address: 2001:2181:2181::21
      apps_network:
        ipv4_address: 172.80.80.11
        ipv6_address: 2001:8080:8080::11
    ports:
      - "9094:9094"
    environment:
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_NODE_ID: 1
      CLUSTER_ID: "bHcwZ3c3a2FqbjFxZHN3OX" # 16 bytes of a base64-encoded UUID. Practically 22 b64 characters. Shell: `uuidgen --time | tr -d '-' | base64 | cut -b 1-22`. JavaScript: `btoa((Math.random()*1e64).toString(36)).substring(0,22)`
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@broker1:2181,2@broker2:2181,3@broker3:2181"
      KAFKA_INTER_BROKER_LISTENER_NAME: "BROKER"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "BROKER:SSL, CONTROLLER:SSL, APPS:SSL, EXTERNAL_APPS:SSL"
      KAFKA_LISTENERS: "BROKER://0.0.0.0:9091,CONTROLLER://0.0.0.0:2181,APPS://0.0.0.0:9092,EXTERNAL_APPS://0.0.0.0:9094"
      KAFKA_ADVERTISED_LISTENERS: "BROKER://172.90.92.11:9091,APPS://172.80.80.11:9092,EXTERNAL_APPS://localhost:9094"

      KAFKA_SSL_CLIENT_AUTH: "required"
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "false"

      KAFKA_SSL_KEYSTORE_TYPE: PKCS12
      KAFKA_SSL_KEYSTORE_LOCATION: /kafka/secrets/acl-principal.pfx
      KAFKA_SSL_KEYSTORE_PASSWORD: "Broker_1_demo_password"
      KAFKA_SSL_KEY_PASSWORD: "Broker_1_demo_password"

      KAFKA_SSL_TRUSTSTORE_TYPE: PEM
      KAFKA_SSL_TRUSTSTORE_LOCATION: "/kafka/secrets/ca.crt"

      KAFKA_AUTHORIZER_CLASS_NAME: "org.apache.kafka.metadata.authorizer.StandardAuthorizer"
      KAFKA_LOG4J_ROOT_LOGLEVEL: "WARN"
      KAFKA_SUPER_USERS: "User:CN=broker;User:CN=kafka-ui;User:CN=admin"

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ['CMD', '/bin/bash', '-c', 'cd /kafka/secrets && _JAVA_OPTIONS="-Xmx32M -Xms32M" kafka-cluster cluster-id --bootstrap-server broker1:9092 --config ./bootstrap.conf || exit 1']
      start_period: "7s"
      interval: "5s"
      timeout: "10s"
      retries: 10
    volumes:
      - ./ContainerData/GeneratedCerts/Kafka/Brokers/Broker1:/kafka/secrets
      - ./ContainerData/Kafka/Brokers/Broker1/Data:/var/lib/kafka/data

  broker2:
    image: confluentinc/cp-kafka:7.5.0
    hostname: broker2
    container_name: broker2
    user: 1000:1001
    depends_on:
      create-certificates:
        required: true
        restart: false
        condition: service_completed_successfully
    networks:
      brokers_network:
        ipv4_address: 172.90.92.12
        ipv6_address: 2001:9092:9092::12
      controllers_network:
        ipv4_address: 172.21.82.22
        ipv6_address: 2001:2181:2181::22
      apps_network:
        ipv4_address: 172.80.80.12
        ipv6_address: 2001:8080:8080::12
    ports:
      - "9095:9095"
    environment:
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_NODE_ID: 2
      CLUSTER_ID: "bHcwZ3c3a2FqbjFxZHN3OX"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@broker1:2181,2@broker2:2181,3@broker3:2181"
      KAFKA_INTER_BROKER_LISTENER_NAME: "BROKER"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "BROKER:SSL, CONTROLLER:SSL, APPS:SSL, EXTERNAL_APPS:SSL"
      KAFKA_LISTENERS: "BROKER://0.0.0.0:9091,CONTROLLER://0.0.0.0:2181,APPS://0.0.0.0:9092,EXTERNAL_APPS://0.0.0.0:9095"
      KAFKA_ADVERTISED_LISTENERS: "BROKER://172.90.92.12:9091,APPS://172.80.80.12:9092,EXTERNAL_APPS://localhost:9095"

      KAFKA_SSL_CLIENT_AUTH: "required"
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "false"

      KAFKA_SSL_KEYSTORE_TYPE: PKCS12
      KAFKA_SSL_KEYSTORE_LOCATION: /kafka/secrets/acl-principal.pfx
      KAFKA_SSL_KEYSTORE_PASSWORD: "Broker_2_demo_password"
      KAFKA_SSL_KEY_PASSWORD: "Broker_2_demo_password"

      KAFKA_SSL_TRUSTSTORE_TYPE: PEM
      KAFKA_SSL_TRUSTSTORE_LOCATION: "/kafka/secrets/ca.crt"

      KAFKA_AUTHORIZER_CLASS_NAME: "org.apache.kafka.metadata.authorizer.StandardAuthorizer"
      KAFKA_LOG4J_ROOT_LOGLEVEL: "WARN"
      KAFKA_SUPER_USERS: "User:CN=broker;User:CN=kafka-ui;User:CN=admin"

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ['CMD', '/bin/bash', '-c', 'cd /kafka/secrets && _JAVA_OPTIONS="-Xmx32M -Xms32M" kafka-cluster cluster-id --bootstrap-server broker2:9092 --config ./bootstrap.conf || exit 1']
      start_period: "7s"
      interval: "5s"
      timeout: "10s"
      retries: 10
    volumes:
      - ./ContainerData/GeneratedCerts/Kafka/Brokers/Broker2:/kafka/secrets
      - ./ContainerData/Kafka/Brokers/Broker2/Data:/var/lib/kafka/data

  broker3:
    image: confluentinc/cp-kafka:7.5.0
    hostname: broker3
    container_name: broker3
    user: 1000:1001
    depends_on:
      create-certificates:
        required: true
        restart: false
        condition: service_completed_successfully
    networks:
      brokers_network:
        ipv4_address: 172.90.92.13
        ipv6_address: 2001:9092:9092::13
      controllers_network:
        ipv4_address: 172.21.82.23
        ipv6_address: 2001:2181:2181::23
      apps_network:
        ipv4_address: 172.80.80.13
        ipv6_address: 2001:8080:8080::13
    ports:
      - "9096:9096"
    environment:
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_NODE_ID: 3
      CLUSTER_ID: "bHcwZ3c3a2FqbjFxZHN3OX"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@broker1:2181,2@broker2:2181,3@broker3:2181"
      KAFKA_INTER_BROKER_LISTENER_NAME: "BROKER"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "BROKER:SSL, CONTROLLER:SSL, APPS:SSL, EXTERNAL_APPS:SSL"
      KAFKA_LISTENERS: "BROKER://0.0.0.0:9091,CONTROLLER://0.0.0.0:2181,APPS://0.0.0.0:9092,EXTERNAL_APPS://0.0.0.0:9096"
      KAFKA_ADVERTISED_LISTENERS: "BROKER://172.90.92.13:9091,APPS://172.80.80.13:9092,EXTERNAL_APPS://localhost:9096"

      KAFKA_SSL_CLIENT_AUTH: "required"
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "false"

      KAFKA_SSL_KEYSTORE_TYPE: PKCS12
      KAFKA_SSL_KEYSTORE_LOCATION: /kafka/secrets/acl-principal.pfx
      KAFKA_SSL_KEYSTORE_PASSWORD: "Broker_3_demo_password"
      KAFKA_SSL_KEY_PASSWORD: "Broker_3_demo_password"

      KAFKA_SSL_TRUSTSTORE_TYPE: PEM
      KAFKA_SSL_TRUSTSTORE_LOCATION: "/kafka/secrets/ca.crt"

      KAFKA_AUTHORIZER_CLASS_NAME: "org.apache.kafka.metadata.authorizer.StandardAuthorizer"
      KAFKA_LOG4J_ROOT_LOGLEVEL: "WARN"
      KAFKA_SUPER_USERS: "User:CN=broker;User:CN=kafka-ui;User:CN=admin"

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ['CMD', '/bin/bash', '-c', 'cd /kafka/secrets && _JAVA_OPTIONS="-Xmx32M -Xms32M" kafka-cluster cluster-id --bootstrap-server broker3:9092 --config ./bootstrap.conf || exit 1']
      start_period: "7s"
      interval: "5s"
      timeout: "10s"
      retries: 10
    volumes:
      - ./ContainerData/GeneratedCerts/Kafka/Brokers/Broker3:/kafka/secrets
      - ./ContainerData/Kafka/Brokers/Broker3/Data:/var/lib/kafka/data

  create-acls:
    image: confluentinc/cp-kafka:7.5.0
    hostname: create-acls
    container_name: create-acls
    user: 1000:1001
    networks:
      - apps_network
    depends_on:
      broker1:
        required: true
        restart: false
        condition: service_healthy
      broker2:
        required: true
        restart: false
        condition: service_healthy
      broker3:
        required: true
        restart: false
        condition: service_healthy
    volumes:
      - ./ContainerData/GeneratedCerts/Kafka/Users/Admin:/kafka/secrets
    environment:
      BOOTSTRAP_SERVERS: "broker1:9092"
      _JAVA_OPTIONS: "-Xmx64M -Xms64M"
    entrypoint:
      - '/bin/bash'
      - '-c'
      - |
        cd /kafka/secrets

        echo '================ Creating ACLs for Schema Registry ============='

        # https://docs.confluent.io/platform/current/schema-registry/security/index.html#config-acls-schemas-topic
        echo 'Creating ACLs for schema registry user'
        kafka-acls --bootstrap-server "$$BOOTSTRAP_SERVERS" --command-config 'adminclient-configs.conf' --add \
                   --allow-principal 'User:CN=schema-registry' --allow-host '*' \
                   --producer --consumer --topic '_schemas' --group 'schema-registry'

        kafka-acls --bootstrap-server "$$BOOTSTRAP_SERVERS" --command-config 'adminclient-configs.conf' --add \
                   --allow-principal 'User:CN=schema-registry' --allow-host '*' \
                   --operation DescribeConfigs --topic '_schemas'

        kafka-acls --bootstrap-server "$$BOOTSTRAP_SERVERS" --command-config 'adminclient-configs.conf' --add \
                   --allow-principal 'User:CN=schema-registry' --allow-host '*' \
                   --operation Describe --topic '_schemas'

        kafka-acls --bootstrap-server "$$BOOTSTRAP_SERVERS" --command-config 'adminclient-configs.conf' --add \
                   --allow-principal 'User:CN=schema-registry' --allow-host '*' \
                   --operation Read --topic '_schemas'

        kafka-acls --bootstrap-server "$$BOOTSTRAP_SERVERS" --command-config 'adminclient-configs.conf' --add \
                   --allow-principal 'User:CN=schema-registry' --allow-host '*' \
                   --operation Write --topic '_schemas'

        kafka-acls --bootstrap-server "$$BOOTSTRAP_SERVERS" --command-config 'adminclient-configs.conf' --add \
                   --allow-principal 'User:CN=schema-registry' --allow-host '*' \
                   --operation Describe --topic '__consumer_offsets'

        kafka-acls --bootstrap-server "$$BOOTSTRAP_SERVERS" --command-config 'adminclient-configs.conf' --add \
                   --allow-principal 'User:CN=schema-registry' --allow-host '*' \
                   --operation Create --cluster kafka-cluster

        kafka-acls --bootstrap-server "$$BOOTSTRAP_SERVERS" --command-config 'adminclient-configs.conf' --add \
                   --allow-principal 'User:CN=schema-registry' --allow-host '*' \
                   --producer --consumer --topic '_schemas_acl' --group 'schema-registry'

        kafka-acls --bootstrap-server "$$BOOTSTRAP_SERVERS" --command-config 'adminclient-configs.conf' --add \
                   --allow-principal 'User:CN=schema-registry' --allow-host '*' \
                   --operation Read --topic '_schemas_acl'

        kafka-acls --bootstrap-server "$$BOOTSTRAP_SERVERS" --command-config 'adminclient-configs.conf' --add \
                   --allow-principal 'User:CN=schema-registry' --allow-host '*' \
                   --operation Write --topic '_schemas_acl'

        kafka-acls --bootstrap-server "$$BOOTSTRAP_SERVERS" --command-config 'adminclient-configs.conf' --add \
                   --allow-principal 'User:CN=schema-registry' --allow-host '*' \
                   --operation DescribeConfigs --topic '_schemas_acl'
        echo '================ Done Creating ACLs for Schema Registry ========'

        echo '================ Creating ACLs for Demo Producer User =========='
        kafka-acls --bootstrap-server "$$BOOTSTRAP_SERVERS" --command-config 'adminclient-configs.conf' --add \
                   --allow-principal 'User:CN=demo-producer' --allow-host '*' \
                   --producer --topic 'Users'
        echo '================ Done Creating ACLs for Demo Producer User ====='

        echo '================ Creating ACLs for Demo Consumer User =========='
        kafka-acls --bootstrap-server "$$BOOTSTRAP_SERVERS" --command-config 'adminclient-configs.conf' --add \
                   --allow-principal 'User:CN=demo-consumer' --allow-host '*' \
                   --consumer --topic 'Users' --group 'cg.demo-consumer.0'
        echo '================ Done Creating ACLs for Demo Consumer User ====='

  create-demo-topics:
    image: confluentinc/cp-kafka:7.5.0
    hostname: create-demo-topics
    container_name: create-demo-topics
    user: 1000:1001
    networks:
      - apps_network
    depends_on:
      broker1:
        required: true
        restart: false
        condition: service_healthy
      broker2:
        required: true
        restart: false
        condition: service_healthy
      broker3:
        required: true
        restart: false
        condition: service_healthy
    volumes:
      - ./ContainerData/GeneratedCerts/Kafka/Users/Admin:/kafka/secrets
    environment:
      BOOTSTRAP_SERVERS: "broker1:9092"
      _JAVA_OPTIONS: "-Xmx64M -Xms64M"
    entrypoint:
      - '/bin/bash'
      - '-c'
      - |
        cd /kafka/secrets

        # blocks until kafka is reachable
        kafka-topics --bootstrap-server $$BOOTSTRAP_SERVERS --command-config 'adminclient-configs.conf' --list

        echo '================ Creating Demo Topics ========================='

        kafka-topics \
          --bootstrap-server $$BOOTSTRAP_SERVERS \
          --command-config 'adminclient-configs.conf' \
          --create \
          --if-not-exists \
          --topic 'Users' \
          --replication-factor '3' \
          --partitions '1' \
          --config 'cleanup.policy=delete' \
          --config 'max.message.bytes=1000012' \
          --config 'min.insync.replicas=2' \
          --config 'retention.bytes=-1' \
          --config 'retention.ms=-1'

        echo '================ Done Creating Demo Topics ===================='

        # echo '================ Creating KvApi Topics ========================='

        # kafka-topics \
        #   --bootstrap-server $$BOOTSTRAP_SERVERS \
        #   --command-config 'adminclient-configs.conf' \
        #   --create \
        #   --if-not-exists \
        #   --topic 't.key-value-store' \
        #   --replication-factor '3' \
        #   --partitions '1' \
        #   --config 'cleanup.policy=compact' \
        #   --config 'max.message.bytes=1000012' \
        #   --config 'min.insync.replicas=2' \
        #   --config 'retention.bytes=-1' \
        #   --config 'retention.ms=-1'

        # echo '================ Done Creating KvApi Topics ===================='

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.3
    hostname: schema-registry
    container_name: schema-registry
    user: 1000:1001
    depends_on:
      broker1:
        required: true
        restart: false
        condition: service_healthy
      broker2:
        required: true
        restart: false
        condition: service_healthy
      broker3:
        required: true
        restart: false
        condition: service_healthy
      create-acls:
        required: true
        restart: false
        condition: service_completed_successfully
    networks:
      - apps_network
    ports:
      - "8083:8083"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: "schema-registry"
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "broker1:9092,broker2:9092,broker3:9092"
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8083"

      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: "SSL"

      SCHEMA_REGISTRY_KAFKASTORE_SSL_TRUSTSTORE_TYPE: "PEM"
      SCHEMA_REGISTRY_KAFKASTORE_SSL_TRUSTSTORE_LOCATION: "/kafka/secrets/ca.crt"

      SCHEMA_REGISTRY_KAFKASTORE_SSL_KEYSTORE_TYPE: "PKCS12"
      SCHEMA_REGISTRY_KAFKASTORE_SSL_KEYSTORE_LOCATION: "/kafka/secrets/acl-principal.pfx"
      SCHEMA_REGISTRY_KAFKASTORE_SSL_KEYSTORE_PASSWORD: "Schema_Registry_users_demo_password"
      SCHEMA_REGISTRY_KAFKASTORE_SSL_KEY_PASSWORD: "Schema_Registry_users_demo_password"

      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: "info"
    healthcheck:
      test: nc -z localhost 8083 || exit -1
      start_period: "5s"
      interval: "5s"
      timeout: "2s"
      retries: 10
    volumes:
      - ./ContainerData/GeneratedCerts/Kafka/Users/SchemaRegistry:/kafka/secrets

  create-demo-schemas:
    image: localhost/cert-creator:latest # Re-use same we use for certs
    # user: 1000:1001
    build:
      context: .
      dockerfile_inline: |
        FROM debian:stable-slim

        RUN apt-get update \
            && apt-get install -y curl \
            && apt-get install -y sed \
            && apt-get install -y openssl \
            && apt-get install -y coreutils \
            && apt-get install -y tar
        # `apt-get install -y base64` is replaced with `apt-get install -y coreutils`
    container_name: create-demo-schemas
    depends_on:
      schema-registry:
        required: true
        restart: false
        condition: service_healthy
    networks:
      - apps_network
    environment:
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: "http://schema-registry:8083"
      SCHEMA_NAME_USER_VALUE: "Users-value"
      SCHEMA_ID_USER_VALUE: "1"
      SCHEMA_DEFINITION_USER_VALUE: |
        {
          "$$schema": "http://json-schema.org/draft-06/schema",
          "title": "User",
          "type": "object",
          "properties": {
            "id": { "type": "string" },
            "name": { "type": "string" },
            "contactDetails": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "kind": { "enum": [ "emailAddress", "phoneNumber" ] },
                  "value": { "type": "string" },
                  "primary": { "type": "boolean" }
                },
                "required": [ "kind", "value", "primary" ]
              },
              "createdAt": { "type": "date-time" },
              "createdBy": { "type": "string" },
              "updatedAt": { "type": "date-time" },
              "updatedBy": { "type": "string" }
            },
            "tags": {
              "type": "array",
              "items": { "type": "string" },
              "uniqueItems": true
            }
          },
          "required": [ "id", "name", "contactDetails", "createdAt", "createdBy" ]
        }
    entrypoint:
      - '/bin/bash'
      - '-c'
      - |
        echo '============== Creating Demo Schema $$SCHEMA_NAME_USER_VALUE =================='

        echo "Escaping double quotes in schema $$SCHEMA_NAME_USER_VALUE"
        # Note double escape of the quotes (\\")
        schema_escaped=$(echo $$SCHEMA_DEFINITION_USER_VALUE | sed 's/"/\\"/g')

        echo "Writing request body containing escaped schema to file"
        echo '{'                                    >  schema.json
        echo "  \"schema\": \"$$schema_escaped\","  >> schema.json
        echo '  "schemaType":"JSON"'                >> schema.json
        echo '}'                                    >> schema.json
        # Valid schema types at the moment are ["JSON","PROTOBUF","AVRO"] (curl --silent -X GET http://schema-registry:8083/schemas/types)
        # Generally don't set id and version, they will be generated for you, but because everything is console here and we need consistent ID's set it explicitly.

        echo "removing newlines in data to post"
        sed -i 's/\n//g' schema.json

        echo "Posting schema to registry"
        curl -X POST -H "Content-Type: application/json" \
          --data @schema.json \
          $$KAFKA_CLUSTERS_0_SCHEMAREGISTRY/subjects/$$SCHEMA_NAME_USER_VALUE/versions

        echo "" # Add newline to make log prettier
        echo '============== Done Creating Demo Schema $$SCHEMA_NAME_USER_VALUE ============='

  produce-demo-events:
    image: confluentinc/cp-schema-registry:7.5.3
    hostname: produce-demo-events
    container_name: produce-demo-events
    user: 1000:1001
    networks:
      - apps_network
    depends_on:
      schema-registry:
        required: true
        restart: false
        condition: service_healthy
      create-demo-schemas:
        required: true
        restart: false
        condition: service_completed_successfully
    volumes:
      - ./ContainerData/GeneratedCerts/Kafka/Users/DemoProducer:/kafka/secrets
    environment:
      BOOTSTRAP_SERVERS: "broker1:9092"
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: "http://schema-registry:8083"
      SEPARATOR: "|"

      TOPIC_USERS: "Users"
      # TOPIC_USERS_SCHEMA_KEY_SUBJECT: ""
      TOPIC_USERS_SCHEMA_VALUE_SUBJECT: "Users-value"
      # TOPIC_USERS_SCHEMA_VALUE_ID: "1"

      TOPIC_USERS_EVENT_KEYS: |-
        "event 0 sample key"
        | "event 1 sample key"
        | "event 2 sample key"
        | "event 3 sample key"
      TOPIC_USERS_EVENT_VALUES: |-
        {
          "id": "event 0 sample ID",
          "name": "this is a name",
          "contactDetails": [ { "kind": "emailAddress", "value": "a@b", "primary": true } ],
          "createdAt": "2024-01-31T19:02Z",
          "createdBy": "this needs value, no?",
          "tags": [ "system1/role1", "system2/role1" ]
        }
        | {
          "id": "event 1 sample ID",
          "name": "also a name",
          "contactDetails": [ { "kind": "emailAddress", "value": "c@d", "primary": true } ],
          "createdAt": "2024-01-31T19:02Z",
          "createdBy": "I think it should have a value",
          "tags": [ "system1/role1", "system2/role2" ]
        }
        | {
          "id": "event 2 sample ID",
          "name": "why can't this be a name",
          "contactDetails": [ { "kind": "emailAddress", "value": "e@f", "primary": true } ],
          "createdAt": "2024-01-31T19:02Z",
          "createdBy": "For the sake of the example",
          "tags": [ "system1/role2", "system2/role1" ]
        }
        | {
          "id": "event 3 sample ID",
          "name": "dare I try an empty string",
          "contactDetails": [ { "kind": "emailAddress", "value": "g@h", "primary": true } ],
          "createdAt": "2024-01-31T19:02Z",
          "createdBy": "I'll just add lots of stuff",
          "tags": [ "system1/role2", "system2/role2" ]
        }

      _JAVA_OPTIONS: "-Xmx64M -Xms64M"
    entrypoint:
      - '/bin/bash'
      - '-c'
      - |
        cd /kafka/secrets

        echo '================ Creating Events on $$TOPIC_USERS Topic ================='
        schema_for_value_metadata_bundle=$(curl --silent \
          -H "Content-Type: application/json" \
          GET $$KAFKA_CLUSTERS_0_SCHEMAREGISTRY/subjects/$$TOPIC_USERS_SCHEMA_VALUE_SUBJECT/versions/latest)
        schema_for_value_schema_string=$(echo $$schema_for_value_metadata_bundle \
          | python3 -c "import sys, json; print(json.load(sys.stdin)['schema'])")

        all_event_keys_internal_newlines_removed=$(echo $$TOPIC_USERS_EVENT_KEYS | sed 's/\n//g' )
        all_event_keys_on_separate_lines_for_producer=$(echo $$all_event_keys_internal_newlines_removed | sed 's/ *'$$SEPARATOR' */\\n/g' )
        keys_with_escaped_quotes=$(echo $$all_event_keys_on_separate_lines_for_producer | sed 's/"/\\"/g' | sed "s/'/\\'/g")

        all_event_values_internal_newlines_removed=$(echo $$TOPIC_USERS_EVENT_VALUES | sed 's/\n//g')
        all_event_values_on_separate_lines_for_producer=$(echo $$all_event_values_internal_newlines_removed | sed 's/ *'$$SEPARATOR' */\\n/g' )
        values_with_escaped_quotes=$(echo $$all_event_values_on_separate_lines_for_producer | sed 's/"/\\"/g' | sed "s/'/\\'/g")

        echo "---"
        paste -d "$$SEPARATOR" <(printf "$$keys_with_escaped_quotes") <(printf "$$values_with_escaped_quotes")
        echo "---"

        paste -d "$$SEPARATOR" <(printf "$$keys_with_escaped_quotes") <(printf "$$values_with_escaped_quotes") \
          | /usr/bin/kafka-json-schema-console-producer \
            --bootstrap-server $$BOOTSTRAP_SERVERS \
            --property "schema.registry.url=$$KAFKA_CLUSTERS_0_SCHEMAREGISTRY" \
            --property "value.schema=$$schema_for_value_schema_string" \
            --property key.schema='{"type":"string"}' \
            --producer.config 'adminclient-configs.conf' \
            --topic "$$TOPIC_USERS" \
            --property "parse.key=true" \
            --property "key.separator=$$SEPARATOR"

        echo '================ Done Creating Events on $$TOPIC_USERS Topic ============'

  consume-demo-events:
    image: confluentinc/cp-schema-registry:7.5.3
    hostname: consume-demo-events
    container_name: consume-demo-events
    user: 1000:1001
    networks:
      - apps_network
    depends_on:
      broker1:
        required: true
        restart: false
        condition: service_healthy
      broker2:
        required: true
        restart: false
        condition: service_healthy
      broker3:
        required: true
        restart: false
        condition: service_healthy
      create-demo-topics:
        required: true
        restart: false
        condition: service_completed_successfully
      create-acls:
        required: true
        restart: false
        condition: service_completed_successfully
      schema-registry:
        required: true
        restart: false
        condition: service_healthy
    volumes:
      - ./ContainerData/GeneratedCerts/Kafka/Users/DemoConsumer:/kafka/secrets # Or you can use admin credentials by mounting those secrets as show below instead
      # - ./ContainerData/GeneratedCerts/Kafka/Users/Admin:/kafka/secrets
    environment:
      BOOTSTRAP_SERVERS: "broker1:9092"
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: "http://schema-registry:8083"
      _JAVA_OPTIONS: "-Xmx64M -Xms64M"
    entrypoint:
      - '/bin/bash'
      - '-c'
      - |
        cd /kafka/secrets

        echo -e 'Setting up consumer of messages on topic so you can debug what happens when someone is live and consuming'
        # The `--group` parameter is not optional when running with ACLs, unless you set up a rule so that anyone can use any consumer groups. If you do, if no group is specified, then a random consumer group is created. I would strongly recomend agains that if you have several applications or sets of users needing to co-exist. Also, even for demo uses, having an explicit consumer group makes things easier to follow. To see the effect of the demo consumer, run `docker compose logs start-demo-consumer --follow` in a shell, go to kafka UI in your browser, submit a new event to the topic in kafka UI, and see it come out in the shell.

        /usr/bin/kafka-json-schema-console-consumer \
          --consumer.config 'adminclient-configs.conf' \
          --bootstrap-server $$BOOTSTRAP_SERVERS \
          --property schema.registry.url=$$KAFKA_CLUSTERS_0_SCHEMAREGISTRY \
          --topic Users \
          --group 'cg.demo-consumer.0' \
          --property print.timestamp=true \
          --property print.key=true \
          --property print.value=true \
          --from-beginning

  kafka-ui:
    image: provectuslabs/kafka-ui
    # image: provectuslabs/kafka-ui:53a6553765a806eda9905c43bfcfe09da6812035
    hostname: kafka-ui
    container_name: kafka-ui
    user: 1000:1001
    depends_on:
      broker1:
        required: true
        restart: false
        condition: service_healthy
      broker2:
        required: true
        restart: false
        condition: service_healthy
      broker3:
        required: true
        restart: false
        condition: service_healthy
      schema-registry: # Not strictly needed
        required: true
        restart: false
        condition: service_healthy
    networks:
      - apps_network
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: "lokalmaskin"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "broker1:9092,broker2:9092,broker3:9092"
      # KAFKA_CLUSTERS_0_ZOOKEEPER: "zookeeper1:2181"
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: "http://schema-registry:8083"
      KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: "SSL"

      KAFKA_CLUSTERS_0_PROPERTIES_SSL_TRUSTSTORE_TYPE: "PEM"
      KAFKA_CLUSTERS_0_PROPERTIES_SSL_TRUSTSTORE_LOCATION: "/kafka/secrets/ca.crt"
      KAFKA_CLUSTERS_0_PROPERTIES_SSL_KEYSTORE_TYPE: "PKCS12"
      KAFKA_CLUSTERS_0_PROPERTIES_SSL_KEYSTORE_LOCATION: "/kafka/secrets/acl-principal.pfx"
      KAFKA_CLUSTERS_0_PROPERTIES_SSL_KEYSTORE_PASSWORD: "Kafka_UI_users_demo_password"
      KAFKA_CLUSTERS_0_PROPERTIES_SSL_KEY_PASSWORD: "Kafka_UI_users_demo_password"
    volumes:
      - ./ContainerData/GeneratedCerts/Kafka/Users/KafkaUi:/kafka/secrets
